29,30c29,30
<       integer :: i, i3, iat, iatall, iateq, ig, ilm, ir, j, k, l, ll, lm1, &
<         lm2, lmax, lold, m, mm, nlmtmp, nr, nsg, stgtmp(3)
---
>       integer :: i, i3, iat, iatall, iateq, ig, ilm, ind, ind2, ir, &
>         j, k, l, ll, lm1, lm2, lmax, lold, m, mm, nlmtmp, nr, nsg, nsg_g, stgtmp(3)
32,33c32,34
<       integer, allocatable :: lm(:,:,:), lmtmp(:,:,:), nlm(:), &
<         nmp1sg(:,:), nmp1ss(:,:), nmp2sg(:,:)
---
>       integer, allocatable :: inds(:), inds2(:), lm(:,:,:), lmtmp(:,:,:), nlm(:), &
>         nmp1sg(:,:), nmp1sg2(:,:), nmp1ss(:,:), nmp2sg(:,:), nsg2(:), &
>         nsgtmp(:), nsg2tmp(:), nsend(:,:)
43,44c44,45
<       complex*16, allocatable :: expg(:,:), ftmp2(:,:,:), vvdwg(:), &
<         vvdws(:), vvdwstot(:), tauk(:), yl(:), ylmg(:,:,:)
---
>       complex*16, allocatable :: expg(:,:), ftmp2(:,:,:), vvdwg(:), vvdwg2(:), &
>         vvdws(:), vvdwstot(:), tauk(:), tauk2(:), yl(:), ylmg(:,:,:)
110c111
<       allocate(nmp1sg(3,nsg),tauk(nsg))
---
>       allocate(inds(nsg),nmp1sg(3,nsg),tauk(nsg))
125a127
>               inds(nsg) = i
130c132
<       deallocate(gtmp,stg,taup)
---
>       deallocate(gtmp,iz,stg,taup)
143a146,337
> #ifdef Parallel
> 
>       do i=0, (npe-1)
>          if (i .ne. myid) call mpi_isend(nsg,1,mpi_integer,i,0,mpi_comm_world,request,ierr)
>       enddo
>       allocate(nsgtmp(0:(npe-1)))
>       nsgtmp(myid) = nsg
>       do i=0, (npe-1)
>          if (i .ne. myid) call mpi_irecv(nsgtmp(i),1,mpi_integer,i,mpi_any_tag,mpi_comm_world,request,ierr)
>       enddo
>       call mpi_wait(request,statusmpi,ierr)
> 
>       call mpi_allreduce(nsg,nsg_g,1,mpi_integer,mpi_sum,mpi_comm_world,ierr)
>       call begend(nsg_g)
>       allocate(nsg2(0:(npe-1)))
>       do i=0, (npe-1)
>          nsg2(i) = nstop(i) - nstart(i) + 1
>       enddo
> 
>       write(6,'("nsg (before redistribution): ",i10)') nsg
>       write(6,'("nsg (after redistribution) : ",i10)') nsg2(myid)
> 
>       allocate(nsg2tmp(0:(npe-1)),nsend(0:(npe-1),0:(npe-1)))
>       nsg2tmp = nsg2
>       do i=0, (npe-1)
>          do j=0, (npe-1)
>             nsend(i,j) = min(nsgtmp(i),nsg2tmp(j))
>             nsgtmp(i) = nsgtmp(i) - nsend(i,j)
>             nsg2tmp(j) = nsg2tmp(j) - nsend(i,j)
>          enddo
>       enddo
>       deallocate(nsgtmp,nsg2tmp)
> 
>       allocate(inds2(nsg2(myid)),nmp1sg2(3,nsg2(myid)),tauk2(nsg2(myid)),vvdwg2(nsg2(myid)))
> 
>       do i=0, (npe-1)
> 
>          if (i .eq. myid) then
>             do j=0, (npe-1)
>                if ((i .ne. j) .and. (nsend(i,j) .ne. 0)) then
>                   if (j .eq. 0) then
>                      ind = 1
>                   else
>                      ind = sum(nsend(i,0:(j-1))) + 1
>                   endif
>                   call mpi_isend(inds(ind:sum(nsend(i,0:j))),nsend(i,j),mpi_integer,j,0,mpi_comm_world,request,ierr)
>                endif
>             enddo
>          endif
> 
>          if ((i .eq. myid) .and. (nsend(i,i) .ne. 0)) then
>             if (i .eq. 0) then
>                ind = 1
>                ind2 = 1
>             else
>                ind = sum(nsend(0:(i-1),i)) + 1
>                ind2 = sum(nsend(i,0:(i-1))) + 1
>             endif
>             inds2(ind:sum(nsend(0:i,i))) = inds(ind2:sum(nsend(i,0:i)))
>          endif
> 
>          if ((i .ne. myid) .and. (nsend(i,myid) .ne. 0)) then
>             if (i .eq. 0) then
>                ind = 1
>             else
>                ind = sum(nsend(0:(i-1),myid)) + 1
>             endif
>             call mpi_irecv(inds2(ind:sum(nsend(0:i,myid))),nsend(i,myid),mpi_integer,i,mpi_any_tag,mpi_comm_world,request,ierr)
>          endif
> 
>          call mpi_wait(request,statusmpi,ierr)
> 
>          if (i .eq. myid) then
>             do j=0, (npe-1)
>                if ((i .ne. j) .and. (nsend(i,j) .ne. 0)) then
>                   if (j .eq. 0) then
>                      ind = 1
>                   else
>                      ind = sum(nsend(i,0:(j-1))) + 1
>                   endif
>                   call mpi_isend(nmp1sg(:,ind:sum(nsend(i,0:j))),3*nsend(i,j),mpi_integer,j,0,mpi_comm_world,request,ierr)
>                endif
>             enddo
>          endif
> 
>          if ((i .eq. myid) .and. (nsend(i,i) .ne. 0)) then
>             if (i .eq. 0) then
>                ind = 1
>                ind2 = 1
>             else
>                ind = sum(nsend(0:(i-1),i)) + 1
>                ind2 = sum(nsend(i,0:(i-1))) + 1
>             endif
>             nmp1sg2(:,ind:sum(nsend(0:i,i))) = nmp1sg(:,ind2:sum(nsend(i,0:i)))
>          endif
> 
>          if ((i .ne. myid) .and. (nsend(i,myid) .ne. 0)) then
>             if (i .eq. 0) then
>                ind = 1
>             else
>                ind = sum(nsend(0:(i-1),myid)) + 1
>             endif
>             call mpi_irecv(nmp1sg2(:,ind:sum(nsend(0:i,myid))),3*nsend(i,myid),mpi_integer,i,mpi_any_tag,mpi_comm_world,request,ierr)
>          endif
> 
>          call mpi_wait(request,statusmpi,ierr)
> 
>          if (i .eq. myid) then
>             do j=0, (npe-1)
>                if ((i .ne. j) .and. (nsend(i,j) .ne. 0)) then
>                   if (j .eq. 0) then
>                      ind = 1
>                   else
>                      ind = sum(nsend(i,0:(j-1))) + 1
>                   endif
>                   call mpi_isend(tauk(ind:sum(nsend(i,0:j))),nsend(i,j),mpi_double_complex,j,0,mpi_comm_world,request,ierr)
>                endif
>             enddo
>          endif
> 
>          if ((i .eq. myid) .and. (nsend(i,i) .ne. 0)) then
>             if (i .eq. 0) then
>                ind = 1
>                ind2 = 1
>             else
>                ind = sum(nsend(0:(i-1),i)) + 1
>                ind2 = sum(nsend(i,0:(i-1))) + 1
>             endif
>             tauk2(ind:sum(nsend(0:i,i))) = tauk(ind2:sum(nsend(i,0:i)))
>          endif
> 
>          if ((i .ne. myid) .and. (nsend(i,myid) .ne. 0)) then
>             if (i .eq. 0) then
>                ind = 1
>             else
>                ind = sum(nsend(0:(i-1),myid)) + 1
>             endif
>             call mpi_irecv(tauk2(ind:sum(nsend(0:i,myid))),nsend(i,myid),mpi_double_complex,i,mpi_any_tag,mpi_comm_world,request,ierr)
>          endif
> 
>          call mpi_wait(request,statusmpi,ierr)
> 
>          if (i .eq. myid) then
>             do j=0, (npe-1)
>                if ((i .ne. j) .and. (nsend(i,j) .ne. 0)) then
>                   if (j .eq. 0) then
>                      ind = 1
>                   else
>                      ind = sum(nsend(i,0:(j-1))) + 1
>                   endif
>                   call mpi_isend(vvdwg(ind:sum(nsend(i,0:j))),nsend(i,j),mpi_double_complex,j,0,mpi_comm_world,request,ierr)
>                endif
>             enddo
>          endif
> 
>          if ((i .eq. myid) .and. (nsend(i,i) .ne. 0)) then
>             if (i .eq. 0) then
>                ind = 1
>                ind2 = 1
>             else
>                ind = sum(nsend(0:(i-1),i)) + 1
>                ind2 = sum(nsend(i,0:(i-1))) + 1
>             endif
>             vvdwg2(ind:sum(nsend(0:i,i))) = vvdwg(ind2:sum(nsend(i,0:i)))
>          endif
> 
>          if ((i .ne. myid) .and. (nsend(i,myid) .ne. 0)) then
>             if (i .eq. 0) then
>                ind = 1
>             else
>                ind = sum(nsend(0:(i-1),myid)) + 1
>             endif
>             call mpi_irecv(vvdwg2(ind:sum(nsend(0:i,myid))),nsend(i,myid),mpi_double_complex,i,mpi_any_tag,mpi_comm_world,request,ierr)
>          endif
> 
>          call mpi_wait(request,statusmpi,ierr)
> 
>       enddo
> 
>       deallocate(inds,nmp1sg,nsend,tauk,vvdwg)
>       nsg = nsg2(myid)
>       deallocate(nsg2)
>       allocate(inds(nsg),nmp1sg(3,nsg),tauk(nsg),vvdwg(nsg))
> 
>       inds = inds2
>       nmp1sg = nmp1sg2
>       tauk = tauk2
>       vvdwg = vvdwg2
>       deallocate(inds2,nmp1sg2,tauk2,vvdwg2)
> 
> #endif
> 
184a379
> 
187a383
> 
236a433
> 
245c442
<       allocate(gtmp(3),stg(3,nsym),taup(nsym),vvdws(nwave))
---
>       allocate(vvdws(nwave))
247,260c444,445
< 
<       nsg = 0
<       do i=1, nwave
<         gtmp = nmp1ss(:,i)
<         call stern
<         do j=1, nst
<           stgtmp = nint(matmul(br2ribr1r,dble(stg(:,j))))
<           i3 = stgtmp(3)
<           if (i3 .lt. 0) i3 = i3 + ifft3_g
<           if ((i3 .ge. local_last_start) .and. (i3 .lt. local_last_start+local_nlast)) then
<             nsg = nsg + 1
<             vvdws(i) = vvdws(i) + vvdwg(nsg)*conjg(tauk(nsg))
<           endif
<         enddo
---
>       do i=1, nsg
>          vvdws(inds(i)) = vvdws(inds(i)) + vvdwg(i)*conjg(tauk(i))
263c448
<       deallocate(gtmp,iz,stg,tauk,taup,vvdwg)
---
>       deallocate(inds,tauk,vvdwg)
304a490,491
> 
>       return
